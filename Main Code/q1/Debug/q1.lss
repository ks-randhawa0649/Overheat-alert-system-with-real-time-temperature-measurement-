
q1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000084  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000607  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051b  00000000  00000000  0000076b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001209  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000012e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	25 c0       	rjmp	.+74     	; 0x80 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<util/delay.h>


int main(void)
{
	DDRB = 0b00100010;
  38:	82 e2       	ldi	r24, 0x22	; 34
  3a:	87 bb       	out	0x17, r24	; 23
    /* Replace with your application code */
    while (1) 
    {
	PORTB = 0b00100000;
  3c:	90 e2       	ldi	r25, 0x20	; 32
	_delay_ms(4000);
	PORTB = 0b00000000;
	_delay_ms(4000);
		PORTB = 0b00000010;
  3e:	82 e0       	ldi	r24, 0x02	; 2
{
	DDRB = 0b00100010;
    /* Replace with your application code */
    while (1) 
    {
	PORTB = 0b00100000;
  40:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  42:	2f ef       	ldi	r18, 0xFF	; 255
  44:	34 e3       	ldi	r19, 0x34	; 52
  46:	4c e0       	ldi	r20, 0x0C	; 12
  48:	21 50       	subi	r18, 0x01	; 1
  4a:	30 40       	sbci	r19, 0x00	; 0
  4c:	40 40       	sbci	r20, 0x00	; 0
  4e:	e1 f7       	brne	.-8      	; 0x48 <__SREG__+0x9>
  50:	00 c0       	rjmp	.+0      	; 0x52 <__SREG__+0x13>
  52:	00 00       	nop
	_delay_ms(4000);
	PORTB = 0b00000000;
  54:	18 ba       	out	0x18, r1	; 24
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	34 e3       	ldi	r19, 0x34	; 52
  5a:	4c e0       	ldi	r20, 0x0C	; 12
  5c:	21 50       	subi	r18, 0x01	; 1
  5e:	30 40       	sbci	r19, 0x00	; 0
  60:	40 40       	sbci	r20, 0x00	; 0
  62:	e1 f7       	brne	.-8      	; 0x5c <__SREG__+0x1d>
  64:	00 c0       	rjmp	.+0      	; 0x66 <__SREG__+0x27>
  66:	00 00       	nop
	_delay_ms(4000);
		PORTB = 0b00000010;
  68:	88 bb       	out	0x18, r24	; 24
  6a:	2f e7       	ldi	r18, 0x7F	; 127
  6c:	3a e1       	ldi	r19, 0x1A	; 26
  6e:	46 e0       	ldi	r20, 0x06	; 6
  70:	21 50       	subi	r18, 0x01	; 1
  72:	30 40       	sbci	r19, 0x00	; 0
  74:	40 40       	sbci	r20, 0x00	; 0
  76:	e1 f7       	brne	.-8      	; 0x70 <__SREG__+0x31>
  78:	00 c0       	rjmp	.+0      	; 0x7a <__SREG__+0x3b>
  7a:	00 00       	nop
		_delay_ms(2000);
		PORTB = 0b00000000;
  7c:	18 ba       	out	0x18, r1	; 24
  7e:	e0 cf       	rjmp	.-64     	; 0x40 <__SREG__+0x1>

00000080 <_exit>:
  80:	f8 94       	cli

00000082 <__stop_program>:
  82:	ff cf       	rjmp	.-2      	; 0x82 <__stop_program>
